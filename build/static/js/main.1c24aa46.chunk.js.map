{"version":3,"sources":["logo.svg","app-script.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","$","document","ready","click","style","display","css","itemsHeight","offsetHeight","window","resize","console","log","width","App","className","type","placeholder","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","then","registration","unregister","catch","error","message"],"mappings":"0JAAAA,EAAOC,QAAU,IAA0B,kC,6HCE3CC,IAAEC,UAAUC,OAAM,WAEdF,IAAE,kBAAkBG,OAAM,WACtB,GAAoC,gBAAjCH,IAAE,UAAU,GAAGI,MAAMC,QACpBL,IAAE,UAAUM,IAAI,UAAW,QAC3BN,IAAE,SAASM,IAAI,YAAa,qBAE5B,CACAN,IAAE,UAAUM,IAAI,UAAW,eAE3B,IAAIC,EAAcP,IAAE,UAAU,GAAGQ,aACjCR,IAAE,SAASM,IAAI,YAAa,cAAgBC,EAAa,WAIjEP,IAAES,QAAQC,QAAO,WACbC,QAAQC,IAAIZ,IAAES,QAAQI,SACnBb,IAAES,QAAQI,SAAW,MACpBb,IAAE,UAAUM,IAAI,UAAW,QAC3BN,IAAE,SAASM,IAAI,YAAa,wBCsDzBQ,MAtEf,WACI,OACA,yBAAKC,UAAU,OACX,4BAAQA,UAAU,cACd,yBAAKA,UAAU,gBACf,yBAAKA,UAAU,cACX,yBAAKA,UAAU,iBACX,yBAAKA,UAAU,SACf,yBAAKA,UAAU,SACf,yBAAKA,UAAU,UAEnB,yBAAKA,UAAU,SACX,uBAAGA,UAAU,QAAb,eACA,uBAAGA,UAAU,QAAb,eACA,uBAAGA,UAAU,QAAb,gBAIZ,6BAASA,UAAU,QACf,yBAAKA,UAAU,kCACX,yBAAKA,UAAU,oBACX,oDACA,0OAGR,yBAAKA,UAAU,mCACX,yBAAKA,UAAU,gBACX,yBAAKA,UAAU,6CAAf,iDAGA,yBAAKA,UAAU,6CACX,yBAAKA,UAAU,iCAAf,SACA,yBAAKA,UAAU,iCACX,2BAAOA,UAAU,eAAeC,KAAK,OAAOC,YAAY,cAGhE,yBAAKF,UAAU,6CACX,yBAAKA,UAAU,iCACX,yBAAKA,UAAU,uCAAf,cACA,yBAAKA,UAAU,uCAAf,cAEJ,yBAAKA,UAAU,iCACX,2BAAOA,UAAU,kCAAkCC,KAAK,OAAOC,YAAY,eAC3E,2BAAOF,UAAU,kCAAkCC,KAAK,OAAOC,YAAY,iBAGnF,yBAAKF,UAAU,6CACX,yBAAKA,UAAU,iCAAf,2BACA,yBAAKA,UAAU,iCACX,4BAAQA,UAAU,eAAeE,YAAY,WACzC,qCACA,qCACA,qCACA,qCACA,wCAIZ,yBAAKF,UAAU,8CACX,yBAAKA,UAAU,mCACX,4BAAQA,UAAU,iBAAlB,qBCrDRG,QACW,cAA7BT,OAAOU,SAASC,UAEe,UAA7BX,OAAOU,SAASC,UAEhBX,OAAOU,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAStB,SAASuB,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcxB,MACrByB,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpB,QAAQoB,MAAMA,EAAMC,c","file":"static/js/main.1c24aa46.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import $ from \"jquery\";\r\n\r\n$(document).ready(function(){\r\n    \r\n    $(\".collapse-menu\").click(()=>{\r\n        if($(\".items\")[0].style.display === \"inline-grid\"){\r\n            $(\".items\").css(\"display\", \"none\");\r\n            $(\".home\").css(\"transform\", \"translateY(0)\");\r\n        }\r\n        else{\r\n            $(\".items\").css(\"display\", \"inline-grid\");\r\n\r\n            let itemsHeight = $(\".items\")[0].offsetHeight;\r\n            $(\".home\").css(\"transform\", \"translateY(\" + itemsHeight +\"px)\");\r\n        }\r\n    });\r\n\r\n    $(window).resize(()=>{\r\n        console.log($(window).width());\r\n        if($(window).width() >= 900 - 15){\r\n            $(\".items\").css(\"display\", \"none\");\r\n            $(\".home\").css(\"transform\", \"translateY(0)\");\r\n        }\r\n\r\n        \r\n    })\r\n\r\n});","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport './app-script.js';\r\n\r\nfunction App() {\r\n    return ( \r\n    <div className=\"App\">\r\n        <header className=\"App-header\">\r\n            <div className=\"logo-header\"></div>\r\n            <div className=\"menu-items\">\r\n                <div className=\"collapse-menu\">\r\n                    <div className=\"line\"></div>\r\n                    <div className=\"line\"></div>\r\n                    <div className=\"line\"></div>              \r\n                </div>\r\n                <div className=\"items\">\r\n                    <a className=\"item\">Héberger</a>\r\n                    <a className=\"item\">Inscription</a>\r\n                    <a className=\"item\">Connexion</a>\r\n                </div>                \r\n            </div>\r\n        </header>\r\n        <section className=\"home\">\r\n            <div className=\"home-contain home-contain-left\">\r\n                <div className=\"home-description\">\r\n                    <h3>Qu'est ce que RBNB ?</h3>\r\n                    <p>RBNB est une plateforme qui s'adresse uniquement aux étudiants. Elle leur permet de louer un logement simplement et en toute tranquillité, afin de faciliter au maximum leur recherche de logement.</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"home-contain home-contain-right\">\r\n                <div className=\"quick-search\">\r\n                    <div className=\"quick-search-item quick-search-item-title\">\r\n                        Réserver des logements et bien plus encore\r\n                    </div>\r\n                    <div className=\"quick-search-item quick-search-item-input\">\r\n                        <div className=\"quick-search-item-input-title\">Où</div>\r\n                        <div className=\"quick-search-item-input-input\">\r\n                            <input className=\"custom-input\" type=\"text\" placeholder=\"Partout\"></input>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"quick-search-item quick-search-item-input\">\r\n                        <div className=\"quick-search-item-input-title\">\r\n                            <div className=\"quick-search-item-input-title-split\">Arrivée</div>\r\n                            <div className=\"quick-search-item-input-title-split\">Départ</div>\r\n                        </div>\r\n                        <div className=\"quick-search-item-input-input\">\r\n                            <input className=\"custom-input custom-input-split\" type=\"text\" placeholder=\"jj/mm/aaaa\"></input>\r\n                            <input className=\"custom-input custom-input-split\" type=\"text\" placeholder=\"jj/mm/aaaa\"></input>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"quick-search-item quick-search-item-input\">\r\n                        <div className=\"quick-search-item-input-title\">Nombre d'étudiant(s)</div>\r\n                        <div className=\"quick-search-item-input-input\">\r\n                            <select className=\"custom-input\" placeholder=\"Partout\">\r\n                                <option>1</option>\r\n                                <option>2</option>\r\n                                <option>3</option>\r\n                                <option>4</option>\r\n                                <option>5</option>\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"quick-search-item quick-search-item-button\">\r\n                        <div className=\"quick-search-item-button-button\">\r\n                            <button className=\"custom-button\">Rechercher</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </section>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}